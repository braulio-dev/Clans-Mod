buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://files.minecraftforge.net/maven' }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "4.0.4"
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/maven' }
}

configurations {
    embed
    compile.extendsFrom embed
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'org.spongepowered.mixin'

version = project.version
group = "club.mineplex.clans"
archivesBaseName = "ClansMod"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

dependencies {

    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
    embed('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'jarjar'
        exclude module: 'commons-codec'
        exclude module: 'commons-io'
        exclude module: 'launchwrapper'
        exclude module: 'asm-commons'
        exclude module: 'slf4j-api'
    }

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    embed 'com.github.Vatuu:discord-rpc:1.6.2'
    implementation 'org.jetbrains:annotations:22.0.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    embed fileTree(dir: 'libs', includes: ['*.jar'])
}

minecraft {
    version = '1.8.9-11.15.1.2318-1.8.9'
    runDir = 'run'
    mappings = 'stable_22'
    makeObfSourceJar = false
    clientJvmArgs += '-Dfml.coreMods.load=club.mineplex.clans.asm.FMLLoadingPlugin'
}

processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, "clansmod.refmap.json"
}

reobf {
    shadowJar {
        mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

jar {
    configurations.embed.each { dep ->
        from(project.zipTree(dep)) {
            exclude "META-INF", "META-INF/**"
        }

        from(project.zipTree(dep)) {
            include "META-INF/services", "META-INF/services/"
        }
    }

    manifest {
        attributes([
                "MixinConfigs"                  : "clansmod.mixins.json",
                'TweakClass'                    : 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder'                    : 0,
                'FMLCorePluginContainsFMLMod'   : 'true',
                'ForceLoadAsMod'                : 'true',
                'FMLCorePlugin'                 : 'club.mineplex.clans.asm.FMLLoadingPlugin',
                'FMLAT'                         : 'clansmod_at.cfg',
        ])
    }

    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    archiveName = project.modName + "-" + project.minecraftVersion + "-" + version + ".jar"
}

sourceSets {
    main { output.resourcesDir = output.classesDir }
}

shadowJar {
    archiveName = tasks.jar.archiveName
    configurations = [project.configurations.embed]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    classifier ''
    exclude('LICENSE')
}

task copyLicenses(type: Copy) {
    from(project.projectDir) {
        include('LICENSE')
        include('NOTICE')
        include('licenses/**')
    }
    into(sourceSets.main.output.resourcesDir)
}

artifacts {
    archives jar
    archives shadowJar
}

tasks.jar.dependsOn(tasks.copyLicenses)
